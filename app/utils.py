import asyncio
import re

import aiohttp
from aiogram.types import Message, URLInputFile
from bs4 import BeautifulSoup

from app import config
# from app.parser import get_solve
from main import bot


class Parser:
	def __init__(self, book: str, numbering: str) -> None:
		self.book = book
		self.numbering = numbering

		self.__subject_url = ''
		self.__parser_engine = config.PARSER_ENGINE

	async def get_solution_data(self) -> None | dict[str, str]:
		subject = self.book.split()[0].lower()

		if subject == '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π':
			self.__subject_url = rf'https://gdz.ru/class-10/english/reshebnik-spotlight-10-afanaseva-o-v/{self.numbering}-s/'
		elif subject == '—Ä—É—Å—Å–∫–∏–π':
			self.__subject_url = rf'https://gdz.ru/class-10/russkii_yazik/vlasenkov-i-rybchenkova-10-11/{self.numbering}-nom/'
		elif subject == '–∞–ª–≥–µ–±—Ä–∞-–∑–∞–¥–∞—á–Ω–∏–∫' and re.match(config.ALGEBRA_NUMBER_PATTERN, self.numbering):
			parts_of_number = self.numbering.split('.')
			self.__subject_url = (
				rf'https://gdz.ru/class-10/algebra/reshebnik-mordkovich-a-g/{parts_of_number[0]}-item-'
				rf'{parts_of_number[1]}/')
		elif subject == '–≥–µ–æ–º–µ—Ç—Ä–∏—è':
			class_number = '10' if int(self.numbering) < 400 else '11'
			self.__subject_url = rf'https://gdz.ru/class-10/geometria/atanasyan-10-11/{class_number}-class-{self.numbering}/'
		elif subject == '–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ':
			self.__subject_url = rf'https://resheba.me/gdz/obshhestvoznanie/10-klass/soboleva/paragraph-{self.numbering}'
			self.__parser_engine = 'resheba.ru'
		else:
			return None

		result = await self.__parse_solution()
		if result:
			return {'solution': result, 'title': get_title(self.book, self.numbering)}
		return None

	async def __parse_solution(self) -> list[str] | str | None:
		"""–ó–Ω–∞—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –º–µ—Ç–æ–¥
			list[str]: –†–µ—à–µ–Ω–∏–µ –≤ –≤–∏–¥–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å —Å–∞–π—Ç–∞ gdz.ru
			str: –†–µ—à–µ–Ω–∏–µ –æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –±–µ—Ä–µ—Ç—Å—è —Å —Å–∞–π—Ç–∞ resheba.ru
			"""
		if self.__subject_url:
			if self.__parser_engine == 'gdz.ru':
				return await self.__parse_gdz()
			elif self.__parser_engine == 'resheba.ru':
				return await self.__parse_resheba()

	async def __parse_gdz(self) -> None | list[str]:
		async with aiohttp.ClientSession() as session:
			async with session.get(self.__subject_url, headers=config.HEADERS) as response:
				if response.status == 404:
					return None

				text = await response.text()
				soup = BeautifulSoup(text, 'html.parser')

				# Url —Ñ–æ—Ç–æ–∫ —Å —Ä–µ—à–µ–Ω–∏—è–º–∏
				solutions_url: list[str] = ['https:' + div.img['src'] for div in
				                            soup.find_all('div', class_='with-overtask')]

				if not solutions_url:
					no_solution: list[str] = [
						'https://gdz.ru' + soup.find('div', class_='task-img-container').img['src']]
					return no_solution

				return solutions_url

	async def __parse_resheba(self) -> None | str:
		async with aiohttp.ClientSession() as session:
			async with session.get(self.__subject_url, headers=config.HEADERS) as response:
				if response.status == 404:
					return None

				text = await response.text()
				soup = BeautifulSoup(text, 'html.parser')

				# –¢–µ–∫—Å—Ç —Ä–µ—à–µ–Ω–∏—è
				solution_text: list[str] = [p.getText() for p in soup.find_all('div', class_='taskText')]
				return ''.join(solution_text).replace('\n\n', '\n')


def get_title(book: str, numbering: str) -> str | None:
	subject = book.split()[0].lower()

	title_formats = {
		'–∞–Ω–≥–ª–∏–π—Å–∫–∏–π': f'{book}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {numbering}',
		'—Ä—É—Å—Å–∫–∏–π': f'{book}, —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ {numbering}',
		'–∞–ª–≥–µ–±—Ä–∞-–∑–∞–¥–∞—á–Ω–∏–∫': f'{book}, –Ω–æ–º–µ—Ä {numbering}',
		'–≥–µ–æ–º–µ—Ç—Ä–∏—è': f'{book}, –Ω–æ–º–µ—Ä {numbering}',
		'–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ': f'{book}, –ø–∞—Ä–∞–≥—Ä–∞—Ñ ¬ß{numbering}'
		}

	return title_formats.get(subject, None)


async def send_solution(message: Message, solution: list[str] | str, title: str) -> None:
	if isinstance(solution, str):
		for text in split_text(solution):
			await message.answer(text)
	else:
		for url in solution:
			image = URLInputFile(url, filename=title)
			await bot.send_photo(chat_id=message.chat.id, photo=image)

			# –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏, —á—Ç–æ–±—ã —Ç–µ–ª–µ–≥—Ä–∞–º –Ω–µ –≤—ã–¥–∞–≤–∞–ª –æ—à–∏–±–∫—É
			await asyncio.sleep(config.MESSAGE_DELAY)

		await message.answer(title)


def split_text(text: str, max_length: int = 4096):
	# –ù–∞—Ö–æ–¥–∏–º –≥—Ä–∞–Ω–∏—Ü—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏ –∞–±–∑–∞—Ü–µ–≤
	boundaries = list(re.finditer(r'(?<=[.!?])\s+|\n', text))

	# –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Ç–µ–∫—Å—Ç–∞ –≤ –≥—Ä–∞–Ω–∏—Ü—ã
	boundaries = [(-1, 0)] + [(m.start(), m.end()) for m in boundaries] + [(len(text), len(text))]

	# –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –∞–±–∑–∞—Ü—ã, –ø–æ–∫–∞ –æ–Ω–∏ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
	parts = []
	start = 0
	for i in range(1, len(boundaries)):
		if boundaries[i][0] - start > max_length:
			parts.append(text[start:boundaries[i - 1][1]])
			start = boundaries[i - 1][1]
	parts.append(text[start:])

	return parts


def get_subject_text(book: str) -> str:
	subject = book.split()[0].lower()

	subject_messages = {
		'–∞–Ω–≥–ª–∏–π—Å–∫–∏–π': '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É üìñ _(–æ—Ç 10 –¥–æ 180 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)_',
		'—Ä—É—Å—Å–∫–∏–π': '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ üìÉ _(–æ—Ç 1 –¥–æ 396 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)_',
		'–∞–ª–≥–µ–±—Ä–∞-–∑–∞–¥–∞—á–Ω–∏–∫': '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è üìñ _(–æ—Ç 1.1 –¥–æ 60.19 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)_',
		'–≥–µ–æ–º–µ—Ç—Ä–∏—è': '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è üìñ _(–æ—Ç 1 –¥–æ 870 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)_',
		'–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ': ('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ —É—á–µ–±–Ω–∏–∫–∞ üìñ _(–æ—Ç 1 –¥–æ 44 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)_\n\n–ï—Å–ª–∏ —É –≤–∞—Å –ø–∞—Ä–∞–≥—Ä–∞—Ñ –≤–∏–¥–∞ '
		                   '_"—á–∏—Å–ª–æ-—á–∏—Å–ª–æ"_, —Ç–æ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –ø–µ—Ä–µ–¥ –¥–µ—Ñ–∏—Å–æ–º')
		}

	return subject_messages.get(subject, '')


def check_numbering(text: str) -> bool:
	if text.isnumeric() or re.match(config.ALGEBRA_NUMBER_PATTERN, text):
		return True
	return False
