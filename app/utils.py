import asyncio
import re

from aiogram.types import URLInputFile, Message
from aiogram_dialog import DialogManager

from app import config
from main import bot
from .database import User


async def send_solution(message: Message, result: dict[str: str], dialog_manager: DialogManager):
	if not result:
		# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —Ä–µ—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
		await message.answer('–ù–µ –Ω–∞–π–¥–µ–Ω–æ üòï')
	else:
		# –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
		solution, title = result.get('solution'), result.get('title')
		if isinstance(solution, str):
			# –ï—Å–ª–∏ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Ç–µ–∫—Å—Ç, —Ä–∞–∑–±–∏–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
			await send_split_text(message, solution)
		elif isinstance(solution, list):
			# –ï—Å–ª–∏ —Ä–µ—à–µ–Ω–∏–µ - —Å–ø–∏—Å–æ–∫ URL-–∞–¥—Ä–µ—Å–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
			await send_solution_urls(message, solution, title)
		await message.answer(title)
	await dialog_manager.done()


async def send_split_text(message: Message, solution: str):
	for text in split_text(solution):
		await message.answer(text)
		await asyncio.sleep(config.MESSAGE_DELAY)


async def send_solution_urls(message: Message, solution: list[str], title: str):
	for url in solution:
		if url.startswith('https://'):
			# –ï—Å–ª–∏ URL - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –∫–∞–∫ —Ñ–æ—Ç–æ
			image = URLInputFile(url, filename=title)
			await bot.send_photo(chat_id=message.chat.id, photo=image)
		else:
			# –ï—Å–ª–∏ —ç—Ç–æ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
			await message.answer(url)
		await asyncio.sleep(config.MESSAGE_DELAY)


def split_text(text: str, max_length: int = 4096) -> list[str]:
	# –ù–∞—Ö–æ–¥–∏–º –≥—Ä–∞–Ω–∏—Ü—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏ –∞–±–∑–∞—Ü–µ–≤
	boundaries = list(re.finditer(r'(?<=[.!?])\s+|\n', text))

	# –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Ç–µ–∫—Å—Ç–∞ –≤ –≥—Ä–∞–Ω–∏—Ü—ã
	boundaries = [(-1, 0)] + [(m.start(), m.end()) for m in boundaries] + [(len(text), len(text))]

	# –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –∞–±–∑–∞—Ü—ã, –ø–æ–∫–∞ –æ–Ω–∏ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
	parts = []
	start = 0
	for i in range(1, len(boundaries)):
		if boundaries[i][0] - start > max_length:
			parts.append(text[start:boundaries[i - 1][1]])
			start = boundaries[i - 1][1]
	parts.append(text[start:])
	return parts


def get_annotation_text(book: str = None, **kwargs) -> str:
	base_text = f'–≠—Ç–æ –≤—Å–µ, —á—Ç–æ –º–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É:\n\n–£—á–µ–±–Ω–∏–∫: ***{book}***\n' if book else ''
	additional_info = '\n'.join(
		[f'{key.capitalize()}: ***{value}***' for key, value in kwargs.items()]) if kwargs else ''
	return base_text + additional_info

async def send_whats_new():
	users = User.get_users()