from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message
from aiogram_dialog import DialogManager

from ..dialogs import *
from ..dialogs import main_dialog
from ..keyboards.keyboards import EnglishKeyboards, GeometryKeyboards, PhysicsKeyboards
from ..states import MainForm

router = Router()
router.include_routers(
	main_dialog,

	dialog_english,
	dialog_russian,
	dialog_math,
	dialog_geometry,
	dialog_sociology,
	# router_physics,
	)

english_kb = EnglishKeyboards()
geometry_kb = GeometryKeyboards()
physics_kb = PhysicsKeyboards()


@router.message(Command('list'))
async def book_selection(message: Message, dialog_manager: DialogManager) -> None:
	await dialog_manager.start(MainForm.book)

# @router.message(MainForm.book)
# async def subject_selection(message: Message, state: FSMContext) -> None:
# 	subject = message.text.split(' ', 1)[0].lower()
# 	if subject in config.BOOKS.keys():
# 		await state.update_data(book=message.text)
# 	# manager.dialog_data['book'] = message.text
# 	else:
# 		await message.reply('–ù–µ –Ω–∞–π–¥–µ–Ω–æ üòï', reply_markup=ReplyKeyboardRemove())
# 		await state.clear()
# 	# await manager.done()
#
# 	if subject == '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π':
# 		# await manager.start(FormEnglish.section)
# 		await message.answer('–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª —É—á–µ–±–Ω–∏–∫–∞',
# 		                     reply_markup=english_kb.section_selection_kb(message.text))

# elif subject == '—Ä—É—Å—Å–∫–∏–π':
# 	await state.set_state(FormRussian.exercise)
#
# 	await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ üìÉ _(–æ—Ç 1 –¥–æ 396 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)_',
# 	                     reply_markup=ReplyKeyboardRemove())
# elif subject == '–∞–ª–≥–µ–±—Ä–∞-–∑–∞–¥–∞—á–Ω–∏–∫':
# 	await state.set_state(FormMath.number)
#
# 	await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è üìñ _(–æ—Ç 1.1 –¥–æ 60.19 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)_',
# 	                     reply_markup=ReplyKeyboardRemove())
# elif subject == '–≥–µ–æ–º–µ—Ç—Ä–∏—è':
# 	await message.answer('–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª —É—á–µ–±–Ω–∏–∫–∞',
# 	                     reply_markup=geometry_kb.section_selection_kb(message.text))
# elif subject == '–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ':
# 	await state.set_state(FormSociology.paragraph)
# 	await message.answer(
# 		'–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ —É—á–µ–±–Ω–∏–∫–∞ üìñ _(–æ—Ç 1 –¥–æ 44 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)_\n\n–ï—Å–ª–∏ —É –≤–∞—Å –ø–∞—Ä–∞–≥—Ä–∞—Ñ –≤–∏–¥–∞ '
# 		'_"—á–∏—Å–ª–æ-—á–∏—Å–ª–æ"_, —Ç–æ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –ø–µ—Ä–µ–¥ –¥–µ—Ñ–∏—Å–æ–º',
# 		reply_markup=ReplyKeyboardRemove())
# elif subject == '—Ñ–∏–∑–∏–∫–∞':
# 	await state.set_state(FormPhysics.book)
# 	await state.update_data(book=message.text)
# 	await state.set_state(FormPhysics.paragraph)
#
# 	await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ', reply_markup=ReplyKeyboardRemove())
