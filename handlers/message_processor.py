from aiogram import Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, URLInputFile, ReplyKeyboardRemove

from config import BOOKS
from keyboards.school_choice import select_book_kb
from main import bot
from parser import get_solve

router = Router()


class Form(StatesGroup):
	book = State()  # –û—Ç–¥–µ–ª—å–Ω—ã–π —É—á–µ–±–Ω–∏–∫ –∫–∞–∫–æ–≥–æ-—Ç–æ –∞–≤—Ç–æ—Ä–∞, —Å–µ—Ä–∏—è
	page = State()  # –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—á–µ–±–Ω–∏–∫–∞


@router.message(Command('start'))
async def greeting_and_select_book(message: Message, state: FSMContext) -> None:
	await state.set_state(Form.book)

	await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}')

	kb = select_book_kb()

	await message.answer('–í—ã–±–µ—Ä–∏ —É—á–µ–±–Ω–∏–∫ üìêüììüìäüìò', reply_markup=kb)


@router.message(Form.book)
async def select_page(message: Message, state: FSMContext) -> None:
	if message.text in BOOKS:
		await state.update_data(book=message.text)
		await state.set_state(Form.page)

		await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É üìÉ', reply_markup=ReplyKeyboardRemove())
	else:
		await message.reply('–¢–∞–∫–æ–≥–æ —É—á–µ–±–Ω–∏–∫–∞, —É –º–µ–Ω—è –Ω–µ—Ç üòï')


@router.message(Form.page)
async def get_exercise_solve(message: Message, state: FSMContext) -> None:
	if message.text.isdigit():
		await state.update_data(page=message.text)
		data: dict = await state.get_data()

		# –°–ø–∏—Å–æ–∫ url —Ñ–æ—Ç–æ —Å —Ä–µ—à–µ–Ω–∏—è–º–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
		result = get_solve(*data.values())
		status_code = result.get('status_code', 500)

		if status_code == 200:
			title = result.get('title')

			for url in result.get('solutions_url'):
				image = URLInputFile(url, filename=title)
				await bot.send_photo(chat_id=message.chat.id, photo=image)

			await message.answer(title)
		elif status_code == 404:
			await message.answer('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
		elif status_code == 500:
			await message.answer(
				'–û–π, —É –º–µ–Ω—è –æ—à–∏–±–∫–∞. –ü—Ä–æ—à—É –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É >>> [Leo Proger](https://t.me/Leo_Proger)',
				parse_mode='MARKDOWN')
	else:
		await message.reply('–¢–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
