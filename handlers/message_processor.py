from aiogram import Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, URLInputFile, ReplyKeyboardRemove

from config import SUBJECTS
from keyboards.school_choice import select_subject_kb, select_textbook_series_kb
from main import bot
from parser import get_solve

router = Router()


class Form(StatesGroup):
	subject = State()  # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π, –†—É—Å—Å–∫–∏–π, –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∏ —Ç–¥
	textbook_series = State()  # –û—Ç–¥–µ–ª—å–Ω—ã–π —É—á–µ–±–Ω–∏–∫ –∫–∞–∫–æ–≥–æ-—Ç–æ –∞–≤—Ç–æ—Ä–∞, —Å–µ—Ä–∏—è
	page = State()  # –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—á–µ–±–Ω–∏–∫–∞


@router.message(Command('start'))
async def greeting_and_select_subject(message: Message, state: FSMContext) -> None:
	await state.set_state(Form.subject)

	await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}')

	kb = select_subject_kb()

	await message.answer('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —à–∫–æ–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç üìêüìèüìàüìâüìäüìò', reply_markup=kb)


@router.message(Form.subject)
async def select_textbook_series(message: Message, state: FSMContext) -> None:
	if message.text in SUBJECTS['with_pages']:
		await state.update_data(subject=message.text)
		await state.set_state(Form.textbook_series)

		kb = select_textbook_series_kb(message.text)

		await message.answer('–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —É—á–µ–±–Ω–∏–∫ üììüìòüìó', reply_markup=kb)
	else:
		await message.reply('–ì–æ—Ç–æ–≤–æ–≥–æ –î–æ–º–∞—à–Ω–µ–≥–æ –ó–∞–¥–∞–Ω–∏—è –∫ —Ç–∞–∫–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É —É –º–µ–Ω—è –µ—â–µ –Ω–µ—Ç üòï')


@router.message(Form.textbook_series)
async def select_page(message: Message, state: FSMContext) -> None:
	data = await state.get_data()

	# ic(SUBJECTS['with_pages'][subject])
	# ic(data)
	# ic(message.text)
	# ic(message.text in SUBJECTS['with_pages'][subject])

	if message.text in SUBJECTS['with_pages'][data['subject']]:
		await state.update_data(textbook_series=message.text)
		await state.set_state(Form.page)

		await message.answer('–ò –ø–æ—Å–ª–µ–¥–Ω–µ–µ... –≤–≤–µ–¥–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É üìÉ', reply_markup=ReplyKeyboardRemove())
	else:
		await message.reply('–¢–∞–∫–æ–≥–æ —É—á–µ–±–Ω–∏–∫–∞, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –º–µ–Ω—è –Ω–µ—Ç üòï')


@router.message(Form.page)
async def select_exercise(message: Message, state: FSMContext) -> None:
	if message.text.isdigit():
		await state.update_data(page=message.text)
		data = await state.get_data()

		# –°–ø–∏—Å–æ–∫ url —Ñ–æ—Ç–æ —Å —Ä–µ—à–µ–Ω–∏—è–º–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
		result = get_solve(*data.values(), pages=True)
		status_code = result.get('status_code')

		if status_code == 200:
			title = result['title']

			for url in result['solutions']:
				image = URLInputFile(url, filename=title)
				await bot.send_photo(chat_id=message.chat.id, photo=image)
			await message.answer(title)
		elif status_code == 500:
			await message.answer(
				'–û–π, —É –º–µ–Ω—è –æ—à–∏–±–∫–∞. –ü—Ä–æ—à—É –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É >>> [Leo Proger](https://t.me/Leo_Proger)',
				parse_mode='MARKDOWN')
		elif status_code == 404:
			await message.answer('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
	else:
		await message.reply('–¢–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
