import asyncio
import re

from aiogram import Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, URLInputFile, ReplyKeyboardRemove

import config
from keyboards.keyboards import book_selection_kb
from main import bot
from parser import get_solve

router = Router()


class Form(StatesGroup):
	book = State()  # –û—Ç–¥–µ–ª—å–Ω—ã–π —É—á–µ–±–Ω–∏–∫ –∫–∞–∫–æ–≥–æ-—Ç–æ –∞–≤—Ç–æ—Ä–∞, —Å–µ—Ä–∏—è

	page = State()  # –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—á–µ–±–Ω–∏–∫–∞
	exercise = State()  # –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –≤ —É—á–µ–±–Ω–∏–∫–µ
	number = State()  # –ù–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è
	paragraph = State()  # –ü–∞—Ä–∞–≥—Ä–∞—Ñ —É—á–µ–±–Ω–∏–∫–∞


@router.message(Command('list'))
async def book_selection(message: Message, state: FSMContext) -> None:
	await state.set_state(Form.book)

	await message.answer('–í—ã–±–µ—Ä–∏ —É—á–µ–±–Ω–∏–∫ üìêüììüìäüìò', reply_markup=book_selection_kb())


@router.message(Form.book)
async def page_or_exercise_selection(message: Message, state: FSMContext) -> None:
	if message.text == config.BOOKS.get('—Ä—É—Å—Å–∫–∏–π'):
		await state.update_data(book=message.text)
		await state.set_state(Form.exercise)

		await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ üìÉ _(–æ—Ç 1 –¥–æ 396 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)_',
		                     reply_markup=ReplyKeyboardRemove())

	elif message.text == config.BOOKS.get('–∞–Ω–≥–ª–∏–π—Å–∫–∏–π'):
		await state.update_data(book=message.text)
		await state.set_state(Form.page)

		await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É üìñ _(–æ—Ç 10 –¥–æ 180 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)_',
		                     reply_markup=ReplyKeyboardRemove())

	elif message.text == config.BOOKS.get('–∞–ª–≥–µ–±—Ä–∞-–∑–∞–¥–∞—á–Ω–∏–∫'):
		await state.update_data(book=message.text)
		await state.set_state(Form.number)

		await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è üìñ _(–æ—Ç 1.1 –¥–æ 60.19 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)_',
		                     reply_markup=ReplyKeyboardRemove())

	elif message.text == config.BOOKS.get('–≥–µ–æ–º–µ—Ç—Ä–∏—è'):
		await state.update_data(book=message.text)
		await state.set_state(Form.number)

		await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è üìñ _(–æ—Ç 1 –¥–æ 870 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)_',
		                     reply_markup=ReplyKeyboardRemove())
	elif message.text == config.BOOKS.get('–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ'):
		await state.update_data(book=message.text)
		await state.set_state(Form.paragraph)

		await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ —É—á–µ–±–Ω–∏–∫–∞ üìñ _(–æ—Ç 1 –¥–æ 44 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)_\n\n'
		                     '–ï—Å–ª–∏ —É –≤–∞—Å –ø–∞—Ä–∞–≥—Ä–∞—Ñ –≤–∏–¥–∞ _"—á–∏—Å–ª–æ-—á–∏—Å–ª–æ"_, —Ç–æ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –ø–µ—Ä–µ–¥ –¥–µ—Ñ–∏—Å–æ–º',
		                     reply_markup=ReplyKeyboardRemove())
	else:
		await message.reply('–¢–∞–∫–æ–≥–æ —É—á–µ–±–Ω–∏–∫–∞, —É –º–µ–Ω—è –Ω–µ—Ç üòï')
		await state.clear()


# –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —É—á–µ–±–Ω–∏–∫–æ–≤ —Å –≤—ã–±–æ—Ä–æ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
@router.message(Form.exercise)
async def get_solve_exercise(message: Message, state: FSMContext) -> None:
	await get_solve_data(message, state, 'exercise', '–¢–∞–∫–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —É –º–µ–Ω—è –Ω–µ—Ç üòï')


# –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —É—á–µ–±–Ω–∏–∫–æ–≤ —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
@router.message(Form.page)
async def get_solve_page(message: Message, state: FSMContext) -> None:
	await get_solve_data(message, state, 'page', '–¢–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É –º–µ–Ω—è –Ω–µ—Ç üòï')


# –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —É—á–µ–±–Ω–∏–∫–æ–≤ —Å –≤—ã–±–æ—Ä–æ–º –Ω–æ–º–µ—Ä–∞
@router.message(Form.number)
async def get_solve_number(message: Message, state: FSMContext) -> None:
	await get_solve_data(message, state, 'number', '–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —É –º–µ–Ω—è –Ω–µ—Ç üòï')


@router.message(Form.paragraph)
async def get_solve_number(message: Message, state: FSMContext) -> None:
	await get_solve_data(message, state, 'paragraph', '–¢–∞–∫–æ–≥–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ —É –º–µ–Ω—è –Ω–µ—Ç üòï')


async def get_solve_data(message: Message, state: FSMContext, data_key: str, error_message: str) -> None:
	if message.text.isdigit() or message.text.replace('.', '', 1).isdigit():
		await state.update_data({data_key: message.text})

		# book, page or exercise or number
		data: dict = await state.get_data()

		# –°–ø–∏—Å–æ–∫ url —Ñ–æ—Ç–æ —Å —Ä–µ—à–µ–Ω–∏—è–º–∏
		result = await get_solve(**data)
		status_code = result.get('status_code', 500)

		if status_code == 200:
			title = result.get('title')
			solution = result.get('solution')

			await send_solve(message=message, solution=solution, title=title)
		elif status_code == 404:
			text, suffix = result.get('text'), result.get('suffix')
			await message.answer(config.ERROR_MESSAGE_404.format(text, suffix))
		elif status_code == 500:
			await message.answer(config.ERROR_MESSAGE_500)
	else:
		await message.reply(error_message)
	await state.clear()


async def send_solve(message: Message, solution: list[str] | str, title: str) -> None:
	if isinstance(solution, str):
		for text in split_text(solution):
			await message.answer(text)
	else:
		for url in solution:
			image = URLInputFile(url, filename=title)
			await bot.send_photo(chat_id=message.chat.id, photo=image)

			# –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏, —á—Ç–æ–±—ã —Ç–µ–ª–µ–≥—Ä–∞–º –Ω–µ –≤—ã–¥–∞–≤–∞–ª –æ—à–∏–±–∫—É
			await asyncio.sleep(config.MESSAGE_DELAY)

		await message.answer(title)


def split_text(text: str, max_length: int = 4096):
	# –ù–∞—Ö–æ–¥–∏–º –≥—Ä–∞–Ω–∏—Ü—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏ –∞–±–∑–∞—Ü–µ–≤
	boundaries = list(re.finditer(r'(?<=[.!?])\s+|\n', text))

	# –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Ç–µ–∫—Å—Ç–∞ –≤ –≥—Ä–∞–Ω–∏—Ü—ã
	boundaries = [(-1, 0)] + [(m.start(), m.end()) for m in boundaries] + [(len(text), len(text))]

	# –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –∞–±–∑–∞—Ü—ã, –ø–æ–∫–∞ –æ–Ω–∏ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
	parts = []
	start = 0
	for i in range(1, len(boundaries)):
		if boundaries[i][0] - start > max_length:
			parts.append(text[start:boundaries[i - 1][1]])
			start = boundaries[i - 1][1]
	parts.append(text[start:])

	return parts
